# Single article
type article implements Node {
  id: ID!
  articleId: Int!
  name: String!
  quantity: Int!
  receiptArticle: [receiptArticle]
  created: String!
  updated: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

# Single receipt
type receipt implements Node {
  id: ID!
  receiptId: Int!
  number: String!
  total: Int!
  receiptArticle: [receiptArticle]
  receiptArticleConnection(after: String, first: Int): receiptArticleConnection
  created: String!
  updated: String
}

# Mapping between receipt and article type
type receiptArticle implements Node {
  id: ID!
  receiptId: Int!
  articleId: Int!
  receipt: receipt
  article: article
}

# A connection to a list of items.
type receiptArticleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [receiptArticleEdge]
}

# An edge in a connection.
type receiptArticleEdge {
  # The item at the end of the edge
  node: receiptArticle

  # A cursor for use in pagination
  cursor: String!
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  personId: String
  token: String
  receipt(id: ID!): receipt
  article(id: ID!): article
  receiptArticle(id: ID!): receiptArticle
}
